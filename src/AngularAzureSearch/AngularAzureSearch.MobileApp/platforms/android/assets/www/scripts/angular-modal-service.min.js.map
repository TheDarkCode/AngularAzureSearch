{"version":3,"sources":["angular-modal-service.min.js","angular-modal-service.js"],"names":["module","angular","factory","$animate","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout","ModalService","self","this","getTemplate","template","templateUrl","deferred","defer","resolve","then","error","reject","promise","appendChild","parent","child","children","length","enter","showModal","options","controllerName","controller","modalScope","$new","closeDeferred","closedDeferred","inputs","$scope","close","result","delay","undefined","leave","modalElement","$destroy","modal","extend","linkFn","$element","modalController","controllerAs","appendElement","body","scope","element","closed","find"],"mappings":"AAAA;AACA,CCKC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAE5BA,GAAOE,QAAQ,gBAAiB,WAAY,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,mBAAoB,WACnI,SAASC,EAAUC,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,EAAkBC,GAK9F,QAASC,KAEP,GAAIC,GAAOC,KAKPC,EAAc,SAASC,EAAUC,GACnC,GAAIC,GAAWT,EAAGU,OAalB,OAZGH,GACDE,EAASE,QAAQJ,GACTC,EACRP,EAAiBO,GAAa,GAC3BI,KAAK,SAAUL,GACdE,EAASE,QAAQJ,IAChB,SAAUM,GACXJ,EAASK,OAAOD,KAGpBJ,EAASK,OAAO,kDAEXL,EAASM,SAMdC,EAAc,SAASC,EAAQC,GACjC,GAAIC,GAAWF,EAAOE,UACtB,OAAIA,GAASC,OAAS,EACb1B,EAAS2B,MAAMH,EAAOD,EAAQE,EAASA,EAASC,OAAS,IAE3D1B,EAAS2B,MAAMH,EAAOD,GAG/Bb,GAAKkB,UAAY,SAASC,GAGxB,GAAId,GAAWT,EAAGU,QAGdc,EAAiBD,EAAQE,UAC7B,OAAID,IAMJlB,EAAYiB,EAAQhB,SAAUgB,EAAQf,aACnCI,KAAK,SAASL,GAGb,GAAImB,GAAa3B,EAAW4B,OAQxBC,EAAgB5B,EAAGU,QACnBmB,EAAiB7B,EAAGU,QACpBoB,GACFC,OAAQL,EACRM,MAAO,SAASC,EAAQC,IACTC,SAAVD,GAAiC,OAAVA,KAAgBA,EAAQ,GAClDhC,EAAS,WAEP0B,EAAcjB,QAAQsB,GAGtBvC,EAAS0C,MAAMC,GACZzB,KAAK,WAEJiB,EAAelB,QAAQsB,GAGvBP,EAAWY,WAKXR,EAAOE,MAAQ,KACfvB,EAAW,KACXmB,EAAgB,KAChBW,EAAQ,KACRT,EAAS,KACTO,EAAe,KACfX,EAAa,QAEhBQ,IAKJX,GAAQO,QAAQtC,QAAQgD,OAAOV,EAAQP,EAAQO,OAIlD,IAAIW,GAAS7C,EAASW,GAClB8B,EAAeI,EAAOf,EAC1BI,GAAOY,SAAWL,CAGlB,IAAIM,GAAkB9C,EAAY0B,EAAQE,WAAYK,EAEnDP,GAAQqB,eACTlB,EAAWH,EAAQqB,cAAgBD,GAGjCpB,EAAQsB,cAEV7B,EAAYO,EAAQsB,cAAeR,GAGnCrB,EAAY8B,EAAMT,EAIpB,IAAIE,IACFd,WAAYkB,EACZI,MAAOrB,EACPsB,QAASX,EACTL,MAAOJ,EAAcb,QACrBkC,OAAQpB,EAAed,QAIzBN,GAASE,QAAQ4B,KAGlB3B,KAAK,KAAM,SAASC,GACnBJ,EAASK,OAAOD,KAGbJ,EAASM,UA5FdN,EAASK,OAAO,qCACTL,EAASM,UA9CtB,GAAI+B,GAAOnD,EAAUuD,KAAK,OA8I1B,OAAO,IAAI/C","file":"angular-modal-service.min.js","sourcesContent":["/*angular-modal-service v0.6.9 - https://github.com/dwmkerr/angular-modal-service */\n!function(){\"use strict\";var e=angular.module(\"angularModalService\",[]);e.factory(\"ModalService\",[\"$animate\",\"$document\",\"$compile\",\"$controller\",\"$http\",\"$rootScope\",\"$q\",\"$templateRequest\",\"$timeout\",function(e,n,t,r,l,o,c,u,i){function a(){var n=this,l=function(e,n){var t=c.defer();return e?t.resolve(e):n?u(n,!0).then(function(e){t.resolve(e)},function(e){t.reject(e)}):t.reject(\"No template or templateUrl has been specified.\"),t.promise},a=function(n,t){var r=n.children();return r.length>0?e.enter(t,n,r[r.length-1]):e.enter(t,n)};n.showModal=function(n){var u=c.defer(),p=n.controller;return p?(l(n.template,n.templateUrl).then(function(l){var p=o.$new(),f=c.defer(),d=c.defer(),m={$scope:p,close:function(n,t){(void 0===t||null===t)&&(t=0),i(function(){f.resolve(n),e.leave($).then(function(){d.resolve(n),p.$destroy(),m.close=null,u=null,f=null,g=null,m=null,$=null,p=null})},t)}};n.inputs&&angular.extend(m,n.inputs);var v=t(l),$=v(p);m.$element=$;var h=r(n.controller,m);n.controllerAs&&(p[n.controllerAs]=h),n.appendElement?a(n.appendElement,$):a(s,$);var g={controller:h,scope:p,element:$,close:f.promise,closed:d.promise};u.resolve(g)}).then(null,function(e){u.reject(e)}),u.promise):(u.reject(\"No controller has been specified.\"),u.promise)}}var s=n.find(\"body\");return new a}])}();\n//# sourceMappingURL=angular-modal-service.min.js.map","//  angularModalService.js\n//\n//  Service for showing modal dialogs.\n\n/***** JSLint Config *****/\n/*global angular  */\n(function() {\n\n  'use strict';\n\n  var module = angular.module('angularModalService', []);\n\n  module.factory('ModalService', ['$animate', '$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateRequest', '$timeout',\n    function($animate, $document, $compile, $controller, $http, $rootScope, $q, $templateRequest, $timeout) {\n\n    //  Get the body of the document, we'll add the modal to this.\n    var body = $document.find('body');\n\n    function ModalService() {\n\n      var self = this;\n\n      //  Returns a promise which gets the template, either\n      //  from the template parameter or via a request to the\n      //  template url parameter.\n      var getTemplate = function(template, templateUrl) {\n        var deferred = $q.defer();\n        if(template) {\n          deferred.resolve(template);\n        } else if(templateUrl) {\n          $templateRequest(templateUrl, true)\n            .then(function (template) {\n              deferred.resolve(template);\n            }, function (error) {\n              deferred.reject(error);\n            });\n        } else {\n          deferred.reject(\"No template or templateUrl has been specified.\");\n        }\n        return deferred.promise;\n      };\n\n      //  Adds an element to the DOM as the last child of its container\n      //  like append, but uses $animate to handle animations. Returns a\n      //  promise that is resolved once all animation is complete.\n      var appendChild = function(parent, child) {\n        var children = parent.children();\n        if (children.length > 0) {\n          return $animate.enter(child, parent, children[children.length - 1]);\n        }\n        return $animate.enter(child, parent);\n      };\n\n      self.showModal = function(options) {\n\n        //  Create a deferred we'll resolve when the modal is ready.\n        var deferred = $q.defer();\n\n        //  Validate the input parameters.\n        var controllerName = options.controller;\n        if(!controllerName) {\n          deferred.reject(\"No controller has been specified.\");\n          return deferred.promise;\n        }\n\n        //  Get the actual html of the template.\n        getTemplate(options.template, options.templateUrl)\n          .then(function(template) {\n\n            //  Create a new scope for the modal.\n            var modalScope = $rootScope.$new();\n\n            //  Create the inputs object to the controller - this will include\n            //  the scope, as well as all inputs provided.\n            //  We will also create a deferred that is resolved with a provided\n            //  close function. The controller can then call 'close(result)'.\n            //  The controller can also provide a delay for closing - this is\n            //  helpful if there are closing animations which must finish first.\n            var closeDeferred = $q.defer();\n            var closedDeferred = $q.defer();\n            var inputs = {\n              $scope: modalScope,\n              close: function(result, delay) {\n                if(delay === undefined || delay === null) delay = 0;\n                $timeout(function() {\n                  //  Resolve the 'close' promise.\n                  closeDeferred.resolve(result);\n\n                  //  Let angular remove the element and wait for animations to finish.\n                  $animate.leave(modalElement)\n                    .then(function () {\n                      //  Resolve the 'closed' promise.\n                      closedDeferred.resolve(result);\n\n                      //  We can now clean up the scope\n                      modalScope.$destroy();\n\n                      //  Unless we null out all of these objects we seem to suffer\n                      //  from memory leaks, if anyone can explain why then I'd\n                      //  be very interested to know.\n                      inputs.close = null;\n                      deferred = null;\n                      closeDeferred = null;\n                      modal = null;\n                      inputs = null;\n                      modalElement = null;\n                      modalScope = null;\n                    });\n                }, delay);\n              }\n            };\n\n            //  If we have provided any inputs, pass them to the controller.\n            if(options.inputs) angular.extend(inputs, options.inputs);\n\n            //  Compile then link the template element, building the actual element.\n            //  Set the $element on the inputs so that it can be injected if required.\n            var linkFn = $compile(template);\n            var modalElement = linkFn(modalScope);\n            inputs.$element = modalElement;\n\n            //  Create the controller, explicitly specifying the scope to use.\n            var modalController = $controller(options.controller, inputs);\n\n            if(options.controllerAs){\n              modalScope[options.controllerAs] = modalController ;\n            }\n            //  Finally, append the modal to the dom.\n            if (options.appendElement) {\n              // append to custom append element\n              appendChild(options.appendElement, modalElement);\n            } else {\n              // append to body when no custom append element is specified\n              appendChild(body, modalElement);\n            }\n\n            //  We now have a modal object...\n            var modal = {\n              controller: modalController,\n              scope: modalScope,\n              element: modalElement,\n              close: closeDeferred.promise,\n              closed: closedDeferred.promise\n            };\n\n            //  ...which is passed to the caller via the promise.\n            deferred.resolve(modal);\n\n          })\n          .then(null, function(error) { // 'catch' doesn't work in IE8.\n            deferred.reject(error);\n          });\n\n        return deferred.promise;\n      };\n\n    }\n\n    return new ModalService();\n  }]);\n\n}());\n"],"sourceRoot":"/source/"}